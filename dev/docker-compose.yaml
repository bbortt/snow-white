name: 'snow-white'

networks:
  default:
    name: podman
  internal:
    name: snow-white

services:
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.127.0
    env_file: .env
    volumes:
      - ./otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
    ports:
      - '1888:1888' # pprof extension
      - '8888:8888' # Prometheus metrics exposed by the Collector
      - '8889:8889' # Prometheus exporter metrics
      - '13133:13133' # health_check extension
      - '4317:4317' # OTLP gRPC receiver
      - '4318:4318' # OTLP http receiver
      - '55679:55679' # zpages extension
    depends_on:
      kafka:
        condition: service_healthy
    restart: on-failure
    networks:
      - internal

  example-application:
    build:
      context: ../example-application
    environment:
      OTEL_EXPORTER_OTLP_PROTOCOL: 'grpc'
      OTEL_EXPORTER_OTLP_ENDPOINT: 'http://otel-collector:4317'
    ports:
      - '8080:8080'
    depends_on:
      - otel-collector
    restart: on-failure
    networks:
      - default
      - internal

  kafka:
    image: bitnami/kafka:4.0.0
    environment:
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_ADVERTISED_LISTENERS: 'PLAINTEXT://127.0.0.1:9092,EXTERNAL://kafka:9094'
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: '1@127.0.0.1:9093'
      KAFKA_CFG_LISTENERS: 'PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094'
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_NUM_PARTITIONS: 1
      KAFKA_CFG_PROCESS_ROLES: 'broker,controller'
      KAFKA_ENABLE_KRAFT: 'yes'
    ports:
      - '9092:9092'
      - '9094:9094'
    healthcheck:
      test: kafka-cluster.sh cluster-id --bootstrap-server kafka:9092 || exit 1
      interval: 1s
      timeout: 5s
      retries: 12
    restart: on-failure
    networks:
      - internal

  kafka.ui:
    image: provectuslabs/kafka-ui:v0.7.2
    environment:
      KAFKA_CLUSTERS_0_NAME: 'snow-white'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'kafka:9094'
    ports:
      - '8090:8080'
    depends_on:
      kafka:
        condition: service_healthy
    restart: on-failure
    networks:
      - default
      - internal

  redis:
    image: redis/redis-stack-server:7.4.0-v1
    ports:
      - '6379:6379'
    healthcheck:
      test: ['CMD-SHELL', 'redis-cli ping | grep PONG']
      interval: 1s
      timeout: 3s
      retries: 5
    restart: on-failure
    networks:
      - internal

  redis.insight:
    image: redislabs/redisinsight:2.70.0
    ports:
      - '5540:5540'
    depends_on:
      redis:
        condition: service_healthy
    restart: on-failure
    networks:
      - default
      - internal

  influxdb:
    image: influxdb:2.7.11-alpine
    ports:
      - '8086:8086'
    environment:
      DOCKER_INFLUXDB_INIT_MODE: 'setup'
      DOCKER_INFLUXDB_INIT_ORG: 'snow-white'
      DOCKER_INFLUXDB_INIT_BUCKET: 'raw-data'
      DOCKER_INFLUXDB_INIT_USERNAME: 'snow-white'
      DOCKER_INFLUXDB_INIT_PASSWORD: 'snow-white'
    restart: on-failure
    networks:
      - default
      - internal

  service-interface-repository:
    build:
      context: ./sir
    ports:
      - '3000:3000'
    healthcheck:
      test: nc -z localhost 3000 || exit 1
      interval: 1s
      timeout: 60s
      retries: 60
    restart: on-failure
    networks:
      - internal

  microservices.api-gateway:
    build:
      context: ../microservices/api-gateway
    hostname: api-gateway
    environment:
      IO_GITHUB_BBORTT_SNOW_WHITE_MICROSERVICES_API_GATEWAY_PUBLIC-URL: 'http://localhost'
      IO_GITHUB_BBORTT_SNOW_WHITE_MICROSERVICES_API_GATEWAY_QUALITY-GATE-API-URL: 'http://quality-gate-api:8080'
      IO_GITHUB_BBORTT_SNOW_WHITE_MICROSERVICES_API_GATEWAY_REPORT-COORDINATION-SERVICE-URL: 'http://report-coordination-service:8080'
      OTEL_EXPORTER_OTLP_PROTOCOL: 'grpc'
      OTEL_EXPORTER_OTLP_ENDPOINT: 'http://otel-collector:4317'
    ports:
      - '80:8080'
    depends_on:
      microservices.quality-gate-api:
        condition: service_healthy
      microservices.report-coordination-service:
        condition: service_healthy
    healthcheck:
      test: wget -O - http://localhost:8090/management/health | grep UP || exit 1
      interval: 1s
      timeout: 5s
      retries: 12
    restart: on-failure
    networks:
      - default
      - internal

  microservices.api-sync-job:
    build:
      context: ../microservices/api-sync-job
    hostname: api-sync-job
    environment:
      IO_GITHUB_BBORTT_SNOW_WHITE_MICROSERVICES_API_SYNC_JOB_SERVICE-INTERFACE_API-NAME-PROPERTY: 'oas.info.x-api-name'
      IO_GITHUB_BBORTT_SNOW_WHITE_MICROSERVICES_API_SYNC_JOB_SERVICE-INTERFACE_BASE-URL: 'http://service-interface-repository:3000'
      IO_GITHUB_BBORTT_SNOW_WHITE_MICROSERVICES_API_SYNC_JOB_SERVICE-INTERFACE_INDEX-URI: '/docker-compose.json'
      OTEL_EXPORTER_OTLP_PROTOCOL: 'grpc'
      OTEL_EXPORTER_OTLP_ENDPOINT: 'http://otel-collector:4317'
      SPRING_DATA_REDIS_HOST: 'redis'
    depends_on:
      service-interface-repository:
        condition: service_healthy
    restart: on-failure
    networks:
      - internal

  microservices.kafka-event-filter:
    build:
      context: ../microservices/kafka-event-filter
    hostname: kafka-event-filter
    environment:
      IO_GITHUB_BBORTT_SNOW_WHITE_KAFKA_EVENT_FILTER_INBOUND_TOPIC_NAME: 'snow-white_inbound'
      IO_GITHUB_BBORTT_SNOW_WHITE_KAFKA_EVENT_FILTER_OUTBOUND_TOPIC_NAME: 'snow-white_outbound'
      IO_GITHUB_BBORTT_SNOW_WHITE_KAFKA_EVENT_FILTER_INIT-TOPICS: 'true'
      OTEL_EXPORTER_OTLP_PROTOCOL: 'grpc'
      OTEL_EXPORTER_OTLP_ENDPOINT: 'http://otel-collector:4317'
      SPRING_DATA_REDIS_HOST: 'redis'
      SPRING_KAFKA_BOOTSTRAP_SERVERS: 'kafka:9094'
    depends_on:
      kafka:
        condition: service_healthy
    restart: on-failure
    networks:
      - internal

  microservices.openapi-coverage-service:
    build:
      context: ../microservices/openapi-coverage-service
    hostname: openapi-coverage-service
    env_file: .env
    environment:
      INFLUXDB_URL: 'http://influxdb:8086'
      INFLUXDB_ORG: 'snow-white'
      INFLUXDB_BUCKET: 'raw-data'
      IO_GITHUB_BBORTT_SNOW_WHITE_MICROSERVICES_OPENAPI_COVERAGE_SERVICE_CALCULATION-REQUEST-TOPIC: 'snow-white-calculation-request'
      IO_GITHUB_BBORTT_SNOW_WHITE_MICROSERVICES_OPENAPI_COVERAGE_SERVICE_INIT-TOPICS: 'true'
      IO_GITHUB_BBORTT_SNOW_WHITE_MICROSERVICES_OPENAPI_COVERAGE_SERVICE_OPENAPI-CALCULATION-RESPONSE-TOPIC: 'snow-white-openapi-calculation-response'
      OTEL_EXPORTER_OTLP_PROTOCOL: 'grpc'
      OTEL_EXPORTER_OTLP_ENDPOINT: 'http://otel-collector:4317'
      SPRING_DATA_REDIS_HOST: 'redis'
      SPRING_KAFKA_BOOTSTRAP_SERVERS: 'kafka:9094'
    depends_on:
      redis:
        condition: service_healthy
      microservices.api-sync-job:
        condition: service_completed_successfully
    restart: on-failure
    networks:
      - internal

  microservices.quality-gate-api:
    build:
      context: ../microservices/quality-gate-api
    hostname: quality-gate-api
    environment:
      IO_GITHUB_BBORTT_SNOW_WHITE_MICROSERVICES_QUALITY_GATE_API_PUBLIC-API-GATEWAY-URL: 'http://localhost'
      OTEL_EXPORTER_OTLP_PROTOCOL: 'grpc'
      OTEL_EXPORTER_OTLP_ENDPOINT: 'http://otel-collector:4317'
      SPRING_DATASOURCE_JDBC_URL: 'jdbc:h2:mem:quality-gate;MODE=PostgreSQL'
      SPRING_DATASOURCE_USERNAME: 'sa'
      SPRING_DATASOURCE_PASSWORD: 'password'
    ports:
      - '8081:8080'
    healthcheck:
      test: wget -O - http://localhost:8090/actuator/health | grep UP || exit 1
      interval: 1s
      timeout: 5s
      retries: 12
    restart: on-failure
    networks:
      - internal

  microservices.report-coordination-service:
    build:
      context: ../microservices/report-coordination-service
    hostname: report-coordination-service
    env_file: .env
    environment:
      IO_GITHUB_BBORTT_SNOW_WHITE_MICROSERVICES_REPORT_COORDINATION_SERVICE_CALCULATION-REQUEST-TOPIC: 'snow-white-calculation-request'
      IO_GITHUB_BBORTT_SNOW_WHITE_MICROSERVICES_REPORT_COORDINATION_SERVICE_OPENAPI-CALCULATION-RESPONSE_TOPIC: 'snow-white-openapi-calculation-response'
      IO_GITHUB_BBORTT_SNOW_WHITE_MICROSERVICES_REPORT_COORDINATION_SERVICE_PUBLIC_API_GATEWAY_URL: 'http://localhost'
      IO_GITHUB_BBORTT_SNOW_WHITE_MICROSERVICES_REPORT_COORDINATION_SERVICE_QUALITY-GATE-API-URL: 'http://quality-gate-api:8080'
      OTEL_EXPORTER_OTLP_PROTOCOL: 'grpc'
      OTEL_EXPORTER_OTLP_ENDPOINT: 'http://otel-collector:4317'
      SPRING_KAFKA_BOOTSTRAP_SERVERS: 'kafka:9094'
    ports:
      - '8084:8080'
    depends_on:
      microservices.quality-gate-api:
        condition: service_healthy
    healthcheck:
      test: wget -O - http://localhost:8090/actuator/health | grep UP || exit 1
      interval: 1s
      timeout: 5s
      retries: 12
    restart: on-failure
    networks:
      - internal
