name: Deployments

on:
  push:
    tags:
      - v*

jobs:
  publish-cli:
    name: 'Publish CLI'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          cache: maven
          distribution: 'temurin'
          java-version: 21
      - name: Build with Maven
        run: ./mvnw -B -DskipTests -Pprod -pl :cli -am install
      - name: Upload CLI Artifacts
        if: ${{ steps.release.outputs.release_created }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "${{  github.ref_name }}" toolkit/cli/target/snow-white-linux-arm64
          gh release upload "${{  github.ref_name }}" toolkit/cli/target/snow-white-linux-x64
          gh release upload "${{  github.ref_name }}" toolkit/cli/target/snow-white-macos-arm64
          gh release upload "${{  github.ref_name }}" toolkit/cli/target/snow-white-macos-x64
          gh release upload "${{  github.ref_name }}" toolkit/cli/target/snow-white-windows-x64.exe
  publish-helm-chart:
    runs-on: ubuntu-latest
    environment: release
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Extract Version from Tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      - uses: pnpm/action-setup@v4
        with:
          run_install: false
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install Dependencies
        run: pnpm install
        working-directory: 'helm'
      - name: Bump Chart appVersion
        run: npx --no-install ts-node scripts/bump-chart-version.ts "${{ steps.version.outputs.VERSION }}"
        working-directory: 'helm'
      - name: Add Helm Repos
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
      - name: Git Configuration
        run: |
          git config user.name "Timon Borter"
          git config user.email "timon.borter@gmx.ch"
      - name: Release Helm Chart
        uses: helm/chart-releaser-action@v1.7.0
        env:
          CR_TOKEN: '${{ secrets.RELEASE_PLEASE_TOKEN }}'
        with:
          charts_dir: 'helm/charts'
  publish-images:
    name: 'Publish Images'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: true
      - name: Extract Version from Tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          cache: maven
          distribution: 'temurin'
          java-version: 21
      - name: Build with Maven
        run: ./mvnw -B -DskipTests -Pprod -pl '!:cli,!:helm' install
      - name: 'Login to GitHub Container Registry'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build JDK Images
        run: .github/scripts/build-oci-images.sh "${{ steps.version.outputs.VERSION }}" "ghcr.io" "--push"
      - name: Build Native Images
        run: ./mvnw -B -Dimage.tag="${{ steps.version.outputs.VERSION }}" -DskipTests -Pnative,prod -pl :kafka-event-filter,:report-coordination-service,:quality-gate-api spring-boot:build-image
      - name: Push Native Images
        run: |
          docker image push "ghcr.io/bbortt/snow-white/kafka-event-filter:${{ steps.version.outputs.VERSION }}"
          docker image push "ghcr.io/bbortt/snow-white/quality-gate-api:${{ steps.version.outputs.VERSION }}"
          docker image push "ghcr.io/bbortt/snow-white/report-coordination-service:${{ steps.version.outputs.VERSION }}"
