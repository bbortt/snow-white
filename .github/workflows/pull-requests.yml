name: Pull-Request Checks

on:
  pull_request:
    branches:
      - main

concurrency:
  group: mr-${{ github.ref }}
  cancel-in-progress: true

jobs:
  labeler:
    name: 'Pull-Request Labels'
    runs-on: ubuntu-latest
    if: ${{ !startsWith(github.head_ref, 'release-please-') }}
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/labeler@v6
  lint:
    name: 'Lint'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false
      - name: Install Node.js
        uses: actions/setup-node@v6
        with:
          cache: 'pnpm'
          node-version: 24
      - name: Install Dependencies
        run: pnpm install
      - name: Check Formatting
        run: pnpm run prettier:check
  ci:
    name: 'Build and Test'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: true
      - name: Set up JDK
        uses: actions/setup-java@v5
        with:
          cache: maven
          distribution: 'temurin'
          java-version: 25
      - name: Cache SonarQube Packages
        uses: actions/cache@v4
        if: '!steps.check.outputs.number'
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Fetch Helm Dependencies
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm dependency build
        working-directory: 'helm/charts/snow-white'
      - name: Build with Maven
        run: ./mvnw -B -Pprod verify
      - name: Fetch References
        run: git fetch --unshallow origin
      - name: Sonar Analysis
        if: "!steps.check.outputs.number && !contains(github.actor, 'dependabot')"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./mvnw -B sonar:sonar \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.organization=bbortt-github \
            -Dsonar.projectKey=bbortt_snow-white
  app-tests:
    name: 'Application Tests'
    if: contains(github.event.pull_request.labels.*.name, 'include:apptests')
    runs-on: ubuntu-latest
    needs: ci
    strategy:
      matrix:
        service: [api-gateway]
      fail-fast: false
    services:
      wiremock:
        image: wiremock/wiremock:3x-alpine
        ports:
          - 9000:8080
        options: --name wiremock
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: true
      - name: Set up JDK
        uses: actions/setup-java@v5
        with:
          cache: maven
          distribution: 'temurin'
          java-version: 25
      - name: Rebuild JAR
        run: |
          ./mvnw -B install \
            -b smart -T4C \
            -Pnode,prod \
            -DskipTests \
            -Dfrontend.build.skip=true \
            -Dfrontend.test.skip=true \
            -pl :${{ matrix.service }} -am
      - name: Build ${{ matrix.service }} Image
        run: |
          docker build \
            -f microservices/${{ matrix.service }}/Dockerfile \
            -t ghcr.io/bbortt/snow-white/${{ matrix.service }}:${{ github.sha }} \
            microservices/${{ matrix.service }}
      - name: Test ${{ matrix.service }} Image
        run: |
          docker_network=$(docker network ls --filter name=^github_network --format "{{.Name}}")
          ./mvnw -B verify \
            -Papptest \
            -Ddocker.network=${docker_network} \
            -Dimage.tag=${{ github.sha }} \
            -pl :${{ matrix.service }}
  native-tests:
    name: 'Native Application Tests'
    if: contains(github.event.pull_request.labels.*.name, 'include:apptests')
    runs-on: ubuntu-latest
    needs: ci
    strategy:
      matrix:
        service: [kafka-event-filter]
      fail-fast: false
    services:
      kafka:
        image: bitnami/kafka:4.0.0
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_CFG_ADVERTISED_LISTENERS: 'PLAINTEXT://localhost:9092,EXTERNAL://kafka:9094'
          KAFKA_CFG_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
          KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: '1@localhost:9093'
          KAFKA_CFG_LISTENERS: 'PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094'
          KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT'
          KAFKA_CFG_NODE_ID: 1
          KAFKA_CFG_PROCESS_ROLES: 'broker,controller'
        ports:
          - 9092:9092
          - 9094:9094
      redis:
        image: redis/redis-stack-server:7.4.0-v1
        ports:
          - 6379:6379
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: true
      - name: Set up JDK
        uses: actions/setup-java@v5
        with:
          cache: maven
          distribution: 'temurin'
          java-version: 25
      - name: Rebuild JAR
        run: |
          ./mvnw -B install \
            -b smart -T4C \
            -Pprod \
            -DskipTests \
            -Dfrontend.build.skip=true \
            -Dfrontend.test.skip=true \
            -pl :${{ matrix.service }} -am
      - name: Build Native ${{ matrix.service }} Image
        run: |
          ./mvnw -B spring-boot:build-image \
            -Pnative \
            -Dimage.tag=${{ github.sha }} \
            -DskipTests \
            -pl :${{ matrix.service }}
      - name: Test Native ${{ matrix.service }} Image
        run: |
          docker_network=$(docker network ls --filter name=^github_network --format "{{.Name}}")
          ./mvnw -B verify \
            -Papptest \
            -Ddocker.network=${docker_network} \
            -Dimage.tag=${{ github.sha }} \
            -pl :${{ matrix.service }}
  prettier-post-release:
    name: 'Run Prettier on Release PR'
    if: ${{ startsWith(github.head_ref, 'release-please-') }}
    runs-on: ubuntu-latest
    environment: release
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v5
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.RELEASE_PLEASE_TOKEN }}
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false
      - name: Install Node.js
        uses: actions/setup-node@v6
        with:
          cache: 'pnpm'
          node-version: 24
      - name: Install Dependencies
        run: pnpm install
      - name: Run prettier:format
        run: pnpm run prettier:format
      - name: Git Configuration
        run: |
          git config user.name "Timon Borter"
          git config user.email "timon.borter@gmx.ch"
      - name: Commit Changes (if any)
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git commit -a -m "chore(release-please): release changes cleanup"
            git push
          fi
