<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright (c) 2025 Timon Borter <timon.borter@gmx.ch>
  ~ Licensed under the Polyform Small Business License 1.0.0
  ~ See LICENSE file for full details.
  -->
<project
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
>
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>io.github.bbortt.snow-white.microservices</groupId>
    <artifactId>microservices</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>

  <artifactId>report-coordination-service</artifactId>
  <packaging>jar</packaging>

  <properties>
    <!-- Default optimization configuration for native image during development -->
    <native-maven-plugin.optimization>-0B</native-maven-plugin.optimization>

    <!-- General configuration for OpenAPI source generation -->
    <basePackage>
      io.github.bbortt.snow.white.microservices.report.coordination.service
    </basePackage>
    <baseRestApiPackage>${basePackage}.api.rest</baseRestApiPackage>
    <baseClientPackage>${basePackage}.api.client</baseClientPackage>
  </properties>

  <dependencies>
    <dependency>
      <groupId>io.opentelemetry.javaagent</groupId>
      <artifactId>opentelemetry-javaagent</artifactId>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>com.fasterxml.jackson.dataformat</groupId>
      <artifactId>jackson-dataformat-xml</artifactId>
    </dependency>

    <dependency>
      <groupId>io.github.bbortt.snow-white</groupId>
      <artifactId>commons</artifactId>
    </dependency>
    <dependency>
      <groupId>io.github.bbortt.snow-white.toolkit</groupId>
      <artifactId>annotation-api</artifactId>
    </dependency>

    <dependency>
      <groupId>org.hibernate.validator</groupId>
      <artifactId>hibernate-validator</artifactId>
    </dependency>

    <dependency>
      <groupId>org.mapstruct</groupId>
      <artifactId>mapstruct</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-starter-webmvc-api</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-flyway</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-kafka</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.flywaydb</groupId>
      <artifactId>flyway-database-postgresql</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>io.swagger.core.v3</groupId>
      <artifactId>swagger-annotations</artifactId>
    </dependency>
    <dependency>
      <groupId>jakarta.validation</groupId>
      <artifactId>jakarta.validation-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.openapitools</groupId>
      <artifactId>jackson-databind-nullable</artifactId>
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.13.2</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.awaitility</groupId>
      <artifactId>awaitility</artifactId>
      <version>4.3.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-webmvc-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.kafka</groupId>
      <artifactId>spring-kafka-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>testcontainers-junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>testcontainers-kafka</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>testcontainers-postgresql</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.wiremock</groupId>
      <artifactId>wiremock</artifactId>
      <version>${org.wiremock.version}</version>
    </dependency>
    <dependency>
      <groupId>org.wiremock.integrations.testcontainers</groupId>
      <artifactId>wiremock-testcontainers-module</artifactId>
      <version>1.0-alpha-15</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.xmlunit</groupId>
      <artifactId>xmlunit-core</artifactId>
      <version>2.10.4</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <annotationProcessorPaths>
            <path>
              <groupId>org.mapstruct</groupId>
              <artifactId>mapstruct-processor</artifactId>
              <version>${org.mapstruct.version}</version>
            </path>
            <path>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
            </path>
            <path>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok-mapstruct-binding</artifactId>
              <version>0.2.0</version>
            </path>
          </annotationProcessorPaths>
          <compilerArgs>
            <arg>-Amapstruct.unmappedTargetPolicy=ERROR</arg>
          </compilerArgs>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>unpack-otel-agent</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <includeGroupIds>io.opentelemetry.javaagent</includeGroupIds>
              <includeArtifactIds>opentelemetry-javaagent</includeArtifactIds>
              <outputDirectory>
                ${project.build.directory}/opentelemetry-javaagent
              </outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <version>${spring-boot.version}</version>
        <executions>
          <execution>
            <configuration>
              <classifier>executable</classifier>
            </configuration>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.openapitools</groupId>
        <artifactId>openapi-generator-maven-plugin</artifactId>
        <dependencies>
          <dependency>
            <groupId>io.github.bbortt.snow-white.toolkit</groupId>
            <artifactId>openapi-generator</artifactId>
            <version>${project.version}</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>generate-quality-gate-api-v1</id>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>
                microservices/report-coordination-service/src/main/resources/openapi/v1-quality-gate-api.yml
              </inputSpec>
              <generatorName>snow-white-spring-server</generatorName>
              <modelPackage>${baseRestApiPackage}.dto</modelPackage>
              <apiPackage>${baseRestApiPackage}</apiPackage>
              <configOptions>
                <apiNameProperty>info.x-api-name</apiNameProperty>
                <delegatePattern>true</delegatePattern>
                <generateBuilders>true</generateBuilders>
                <interfaceOnly>true</interfaceOnly>
                <userOptional>true</userOptional>
                <useSpringBoot3>true</useSpringBoot3>
                <useTags>true</useTags>
              </configOptions>
            </configuration>
          </execution>
          <execution>
            <id>generate-report-api-v1</id>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>
                microservices/report-coordination-service/src/main/resources/openapi/v1-report-api.yml
              </inputSpec>
              <generatorName>snow-white-spring-server</generatorName>
              <modelPackage>${baseRestApiPackage}.dto</modelPackage>
              <apiPackage>${baseRestApiPackage}</apiPackage>
              <configOptions>
                <apiNameProperty>info.x-api-name</apiNameProperty>
                <delegatePattern>true</delegatePattern>
                <generateBuilders>true</generateBuilders>
                <interfaceOnly>true</interfaceOnly>
                <userOptional>true</userOptional>
                <useSpringBoot3>true</useSpringBoot3>
                <useTags>true</useTags>
              </configOptions>
            </configuration>
          </execution>
          <execution>
            <id>generate-quality-gate-api-v1-client</id>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>
                microservices/quality-gate-api/src/main/resources/openapi/v1-quality-gate-api.yml
              </inputSpec>
              <apiPackage>${baseClientPackage}.qualitygateapi.api</apiPackage>
              <invokerPackage>
                ${baseClientPackage}.qualitygateapi
              </invokerPackage>
              <modelPackage>
                ${baseClientPackage}.qualitygateapi.dto
              </modelPackage>
              <generatorName>java</generatorName>
              <configOptions>
                <library>restclient</library>
                <useJakartaEe>true</useJakartaEe>
              </configOptions>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
            <id>remove-generated-test-sources</id>
            <phase>process-sources</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <delete>
                  <fileset
                    dir="${project.build.directory}/generated-sources/openapi/src"
                    includes="test/**"
                  />
                </delete>
              </target>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>prod</id>

      <properties>
        <!-- 03 tells GraalVM to optimize for peak performance -->
        <native-maven-plugin.optimization>-O3</native-maven-plugin.optimization>
      </properties>
    </profile>

    <profile>
      <id>native</id>

      <properties>
        <repackage.classifier>exec</repackage.classifier>
        <modernizer.skip>true</modernizer.skip>
      </properties>

      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-jar-plugin</artifactId>
            <configuration>
              <archive>
                <manifestEntries>
                  <Spring-Boot-Native-Processed>
                    true
                  </Spring-Boot-Native-Processed>
                </manifestEntries>
              </archive>
            </configuration>
          </plugin>

          <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>

            <configuration>
              <image>
                <env>
                  <BP_JVM_VERSION>${maven.compiler.release}</BP_JVM_VERSION>
                  <BP_IMAGE_LABELS>
                    org.opencontainers.image.name=report-coordination-service
                  </BP_IMAGE_LABELS>
                  <BP_OCI_TITLE>
                    snow-white Report Coordination Service
                  </BP_OCI_TITLE>
                  <BP_OCI_DESCRIPTION>
                    Report Coordination Service of snow-white
                  </BP_OCI_DESCRIPTION>
                  <BP_OCI_URL>https://github.com/bbortt/snow-white</BP_OCI_URL>
                  <BP_OCI_SOURCE>
                    https://github.com/bbortt/snow-white/tree/main/microservices/report-coordination-service
                  </BP_OCI_SOURCE>
                  <BP_OCI_DOCUMENTATION>
                    https://github.com/bbortt/snow-white#readme
                  </BP_OCI_DOCUMENTATION>
                  <BP_OCI_VERSION>${image.tag}</BP_OCI_VERSION>
                  <BP_OCI_CREATED>${maven.build.timestamp}</BP_OCI_CREATED>
                  <BP_OCI_AUTHORS>
                    Timon Borter &lt; timon.borter@gmx.ch &gt;
                  </BP_OCI_AUTHORS>
                  <BP_OCI_LICENSES>
                    https://polyformproject.org/licenses/small-business/1.0.0/
                  </BP_OCI_LICENSES>
                </env>
              </image>
              <imageName>
                ${container.registry}/bbortt/snow-white/report-coordination-service:${image.tag}
              </imageName>
            </configuration>

            <executions>
              <execution>
                <id>process-aot</id>
                <goals>
                  <goal>process-aot</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.graalvm.buildtools</groupId>
            <artifactId>native-maven-plugin</artifactId>

            <configuration>
              <buildArgs>
                <buildArg>${native-maven-plugin.optimization}</buildArg>
                <buildArg>--no-fallback</buildArg>
                <buildArg>--verbose</buildArg>
                <buildArg>-Dspring.profiles.active=prod</buildArg>
              </buildArgs>
              <classesDirectory>
                ${project.build.outputDirectory}
              </classesDirectory>
              <mainClass>${basePackage}.Main</mainClass>
              <metadataRepository>
                <enabled>true</enabled>
              </metadataRepository>
              <verbose>true</verbose>
            </configuration>

            <executions>
              <execution>
                <id>add-reachability-metadata</id>
                <goals>
                  <goal>add-reachability-metadata</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
