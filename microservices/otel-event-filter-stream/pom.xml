<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright (c) 2025 Timon Borter <timon.borter@gmx.ch>
  ~ Licensed under the Polyform Small Business License 1.0.0
  ~ See LICENSE file for full details.
  -->
<project
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
>
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>io.github.bbortt.snow-white.microservices</groupId>
    <artifactId>microservices</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>

  <artifactId>otel-event-filter-stream</artifactId>
  <packaging>jar</packaging>

  <properties>
    <mainClass>
      io.github.bbortt.snow.white.microservices.otel.event.filter.stream.Main
    </mainClass>

    <maven.build.timestamp.format>
      yyyy-MM-dd'T'HH:mm:ss'Z'
    </maven.build.timestamp.format>

    <!-- Default optimization configuration for native image during development -->
    <native-maven-plugin.optimization>-0B</native-maven-plugin.optimization>

    <citrus.version>4.8.2</citrus.version>
    <confluent.version>8.1.0</confluent.version>
    <google-protobuf.version>4.33.0</google-protobuf.version>
    <grpc.version>1.76.0</grpc.version>
    <spring-cloud.version>4.1.4</spring-cloud.version>

    <protobuf-maven-plugin.version>4.0.0</protobuf-maven-plugin.version>

    <!-- Application Testing -->
    <docker.network>bridge</docker.network>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>io.opentelemetry</groupId>
        <artifactId>opentelemetry-bom</artifactId>
        <version>1.55.0</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <dependency>
        <groupId>commons-io</groupId>
        <artifactId>commons-io</artifactId>
        <version>2.20.0</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>io.github.bbortt.snow-white</groupId>
      <artifactId>commons</artifactId>
    </dependency>

    <dependency>
      <groupId>io.opentelemetry.javaagent</groupId>
      <artifactId>opentelemetry-javaagent</artifactId>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>com.google.protobuf</groupId>
      <artifactId>protobuf-java</artifactId>
      <version>${google-protobuf.version}</version>
    </dependency>

    <dependency>
      <groupId>io.confluent</groupId>
      <artifactId>kafka-streams-protobuf-serde</artifactId>
      <version>${confluent.version}</version>
    </dependency>

    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-protobuf</artifactId>
      <version>${grpc.version}</version>
    </dependency>
    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-stub</artifactId>
      <version>${grpc.version}</version>
    </dependency>

    <dependency>
      <groupId>io.opentelemetry</groupId>
      <artifactId>opentelemetry-api</artifactId>
    </dependency>
    <dependency>
      <groupId>io.opentelemetry.semconv</groupId>
      <artifactId>opentelemetry-semconv</artifactId>
    </dependency>

    <dependency>
      <groupId>javax.annotation</groupId>
      <artifactId>javax.annotation-api</artifactId>
      <version>1.3.2</version>
    </dependency>

    <dependency>
      <groupId>org.apache.kafka</groupId>
      <artifactId>kafka-streams</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-redis</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-kafka</artifactId>
    </dependency>

    <dependency>
      <groupId>io.github.bbortt.snow-white</groupId>
      <artifactId>archunit-rules</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.citrusframework</groupId>
      <artifactId>citrus-junit5</artifactId>
      <version>${citrus.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.citrusframework</groupId>
      <artifactId>citrus-kafka</artifactId>
      <version>${citrus.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.kafka</groupId>
      <artifactId>spring-kafka-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>redis.clients</groupId>
      <artifactId>jedis</artifactId>
      <version>7.0.0</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>unpack-otel-agent</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <includeGroupIds>io.opentelemetry.javaagent</includeGroupIds>
              <includeArtifactIds>opentelemetry-javaagent</includeArtifactIds>
              <outputDirectory>
                ${project.build.directory}/opentelemetry-javaagent
              </outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>io.github.ascopes</groupId>
        <artifactId>protobuf-maven-plugin</artifactId>
        <version>${protobuf-maven-plugin.version}</version>
        <configuration>
          <protocVersion>${google-protobuf.version}</protocVersion>
          <binaryMavenPlugins>
            <binaryMavenPlugin>
              <groupId>io.grpc</groupId>
              <artifactId>protoc-gen-grpc-java</artifactId>
              <version>${grpc.version}</version>
            </binaryMavenPlugin>
          </binaryMavenPlugins>
          <ignoreProjectDependencies>true</ignoreProjectDependencies>
          <sourceDirectories>
            <sourceDirectory>
              ${maven.multiModuleProjectDirectory}/opentelemetry-proto
            </sourceDirectory>
          </sourceDirectories>
        </configuration>

        <executions>
          <execution>
            <goals>
              <goal>generate</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <version>${spring-boot.version}</version>
        <executions>
          <execution>
            <configuration>
              <classifier>executable</classifier>
              <mainClass>${mainClass}</mainClass>
            </configuration>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>prod</id>

      <properties>
        <!-- 03 tells GraalVM to optimize for peak performance -->
        <native-maven-plugin.optimization>-O3</native-maven-plugin.optimization>
      </properties>
    </profile>

    <profile>
      <id>native</id>

      <properties>
        <repackage.classifier>exec</repackage.classifier>
        <modernizer.skip>true</modernizer.skip>
      </properties>

      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-jar-plugin</artifactId>
            <configuration>
              <archive>
                <manifestEntries>
                  <Spring-Boot-Native-Processed>
                    true
                  </Spring-Boot-Native-Processed>
                </manifestEntries>
              </archive>
            </configuration>
          </plugin>

          <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>

            <configuration>
              <image>
                <env>
                  <BP_JVM_VERSION>${maven.compiler.release}</BP_JVM_VERSION>
                  <BP_IMAGE_LABELS>
                    org.opencontainers.image.name=otel-event-filter-stream
                  </BP_IMAGE_LABELS>
                  <BP_OCI_TITLE>snow-white OTEL Event Filter</BP_OCI_TITLE>
                  <BP_OCI_DESCRIPTION>
                    OTEL Event Filter of snow-white
                  </BP_OCI_DESCRIPTION>
                  <BP_OCI_URL>https://github.com/bbortt/snow-white</BP_OCI_URL>
                  <BP_OCI_SOURCE>
                    https://github.com/bbortt/snow-white/tree/main/microservices/otel-event-filter-stream
                  </BP_OCI_SOURCE>
                  <BP_OCI_DOCUMENTATION>
                    https://github.com/bbortt/snow-white#readme
                  </BP_OCI_DOCUMENTATION>
                  <BP_OCI_VERSION>${image.tag}</BP_OCI_VERSION>
                  <BP_OCI_CREATED>${maven.build.timestamp}</BP_OCI_CREATED>
                  <BP_OCI_AUTHORS>
                    Timon Borter &lt; timon.borter@gmx.ch &gt;
                  </BP_OCI_AUTHORS>
                  <BP_OCI_LICENSES>
                    https://polyformproject.org/licenses/small-business/1.0.0/
                  </BP_OCI_LICENSES>
                </env>
              </image>
              <imageName>
                ${container.registry}/bbortt/snow-white/otel-event-filter-stream:${image.tag}
              </imageName>
            </configuration>

            <executions>
              <execution>
                <id>process-aot</id>
                <goals>
                  <goal>process-aot</goal>
                </goals>
                <configuration>
                  <mainClass>${mainClass}</mainClass>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.graalvm.buildtools</groupId>
            <artifactId>native-maven-plugin</artifactId>

            <configuration>
              <buildArgs>
                <buildArg>${native-maven-plugin.optimization}</buildArg>
                <buildArg>--no-fallback</buildArg>
                <buildArg>--verbose</buildArg>
                <buildArg>-Dspring.profiles.active=prod</buildArg>
              </buildArgs>
              <classesDirectory>
                ${project.build.outputDirectory}
              </classesDirectory>
              <metadataRepository>
                <enabled>true</enabled>
              </metadataRepository>
              <verbose>true</verbose>
            </configuration>

            <executions>
              <execution>
                <id>add-reachability-metadata</id>
                <goals>
                  <goal>add-reachability-metadata</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>apptest</id>

      <properties>
        <frontend.build.skip>true</frontend.build.skip>
        <frontend.test.skip>true</frontend.test.skip>
      </properties>

      <build>
        <resources>
          <resource>
            <directory>src/apptest/resources</directory>
          </resource>
        </resources>

        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>build-helper-maven-plugin</artifactId>
            <version>3.6.1</version>
            <executions>
              <execution>
                <id>add-test-source</id>
                <phase>generate-test-sources</phase>
                <goals>
                  <goal>add-test-source</goal>
                </goals>
                <configuration>
                  <sources>
                    <source>src/apptest/java</source>
                  </sources>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <skip>true</skip>
            </configuration>
          </plugin>

          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <configuration>
              <images>
                <image>
                  <name>
                    ${container.registry}/bbortt/snow-white/otel-event-filter-stream:${image.tag}
                  </name>
                  <alias>otel-event-filter-stream</alias>
                  <run>
                    <env>
                      <SNOW_WHITE_OTEL_EVENT_FILTER_INBOUND_TOPIC_NAME>
                        snow-white_inbound
                      </SNOW_WHITE_OTEL_EVENT_FILTER_INBOUND_TOPIC_NAME>
                      <SNOW_WHITE_OTEL_EVENT_FILTER_INIT-TOPICS>
                        true
                      </SNOW_WHITE_OTEL_EVENT_FILTER_INIT-TOPICS>
                      <SNOW_WHITE_OTEL_EVENT_FILTER_OUTBOUND_TOPIC_NAME>
                        snow-white_outbound
                      </SNOW_WHITE_OTEL_EVENT_FILTER_OUTBOUND_TOPIC_NAME>
                      <SPRING_DATA_REDIS_HOST>redis</SPRING_DATA_REDIS_HOST>
                      <SPRING_KAFKA_BOOTSTRAP_SERVERS>
                        kafka:9094
                      </SPRING_KAFKA_BOOTSTRAP_SERVERS>
                    </env>
                    <log>
                      <prefix>otel-event-filter-stream</prefix>
                      <date>default</date>
                    </log>
                    <network>
                      <name>${docker.network}</name>
                    </network>
                  </run>
                </image>
              </images>
            </configuration>

            <executions>
              <execution>
                <id>start-containers</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>

              <execution>
                <id>stop-containers</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <executions>
              <execution>
                <configuration>
                  <includes>
                    <include>**/*AppTest.java</include>
                  </includes>
                </configuration>
                <goals>
                  <goal>integration-test</goal>
                  <goal>verify</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <repositories>
    <repository>
      <id>confluent</id>
      <url>https://packages.confluent.io/maven/</url>
    </repository>
    <repository>
      <id>central</id>
      <url>https://repo1.maven.org/maven2/</url>
    </repository>
  </repositories>
</project>
