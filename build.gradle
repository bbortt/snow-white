plugins {
    id "com.github.node-gradle.node"
    id "io.quarkus"
    id "java"
    id "org.flywaydb.flyway"
    id "org.openapi.generator"
}

group = "io.github.bbortt"
version = "${version}"

sourceCompatibility = "${sourceCompatibility}"
assert System.properties["java.specification.version"] == "${sourceCompatibility}"

repositories {
    mavenLocal()
    mavenCentral()
}

clean {
    delete "${node.workDir}"
    delete "${node.npmWorkDir}"
    delete "${node.nodeProjectDir}"
}

dependencies {
    implementation enforcedPlatform("io.quarkus.platform:quarkus-bom:${quarkusPlatformVersion}")
    implementation "commons-fileupload:commons-fileupload:1.4"
    implementation "io.opentelemetry:opentelemetry-semconv:1.22.0-alpha"
    implementation "io.swagger.parser.v3:swagger-parser:2.1.10"
    implementation "io.quarkus:quarkus-config-yaml"
    implementation "io.quarkus:quarkus-grpc"
    implementation "io.quarkus:quarkus-hibernate-reactive-panache"
    implementation "io.quarkus:quarkus-resteasy-reactive"
    implementation "io.quarkus:quarkus-resteasy-reactive-jackson"
    implementation "io.quarkus:quarkus-reactive-pg-client"
    implementation "io.quarkus:quarkus-arc"
    implementation "io.quarkus:quarkus-smallrye-health"
    implementation "javax.servlet:javax.servlet-api:4.0.1"
    compileOnly "org.postgresql:postgresql"
    testImplementation "io.quarkus:quarkus-junit5"
    testImplementation "io.rest-assured:rest-assured"
    implementation "javax.validation:validation-api:2.0.1.Final"
}

node {
    version = "16.17.0"
    npmVersion = "8.15.0"
    npmInstallCommand = "ci"
    download = project.hasProperty("nodeInstall")
    workDir = file("${project.rootDir}/.gradle/nodejs")
    npmWorkDir = file("${project.rootDir}/.gradle/npm")
}

task prettier(type: NpmTask, dependsOn: "npmInstall") {
    args = ["run", "prettier:check"]
}
check.dependsOn prettier

// TODO: This generator does not support reactive generation
// Use https://github.com/quarkiverse/quarkus-openapi-generator once stable
task generateRESTApi(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "jaxrs-spec"
    inputSpec = "${project.rootDir}/src/main/openapi/api.v1.yml".toString()
    outputDir = "${project.buildDir}/generated-sources".toString()
    apiPackage = "io.github.bbortt.snow.white.rest.v1"
    invokerPackage = "io.github.bbortt.snow.white.rest.v1"
    modelNameSuffix = "Dto"
    modelPackage = "io.github.bbortt.snow.white.rest.v1.dto"
    configOptions = [
            dateLibrary          : "java8",
            delegatePattern      : "true",
            interfaceOnly        : "true",
            useOptional          : "true",
            useSwaggerAnnotations: "false",
            useTags              : "true",
            serializableModel    : "true"
    ]
}
compileJava.dependsOn tasks.generateRESTApi
sourceSets.main.java.srcDirs += "${project.buildDir}/generated-sources/src/gen/java"

flyway {
    locations = ["filesystem:src/main/resources/db/migration"]
}

task flywayMigrateDev(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
    url = "jdbc:postgresql://localhost:5432/snow_white"
    user = "snow_white"
    password = "snow_white_password"
}

task flywayMigrateTest(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
    url = "jdbc:postgresql://localhost:5432/snow_white_test"
    user = "snow_white"
    password = "snow_white_password"
}

task flywayCleanTest(type: org.flywaydb.gradle.task.FlywayCleanTask) {
    url = "jdbc:postgresql://localhost:5432/snow_white_test"
    user = "snow_white"
    password = "snow_white_password"
}
