plugins {
    id "com.github.node-gradle.node"
    id "com.google.protobuf"
    id "java"
    id "org.flywaydb.flyway"
    id "org.springframework.boot"
    id "io.spring.dependency-management"
}

group = "io.github.bbortt"
version = "${version}"

sourceCompatibility = "${sourceCompatibility}"
assert System.properties["java.specification.version"] == "${sourceCompatibility}"

repositories {
    mavenLocal()
    mavenCentral()
}

clean {
    delete "${node.workDir}"
    delete "${node.npmWorkDir}"
    delete "${node.nodeProjectDir}"
}

dependencies {
    implementation "com.google.protobuf:protobuf-java:${googleProtobufVersion}"
    implementation "io.grpc:grpc-stub:${ioGrpcVersion}"
    implementation "io.grpc:grpc-protobuf:${ioGrpcVersion}"
    implementation "jakarta.annotation:jakarta.annotation-api:2.1.1"
    implementation "javax.annotation:javax.annotation-api:1.3.2"
    implementation "net.devh:grpc-server-spring-boot-starter:2.14.0.RELEASE"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    // TODO: Should be `developmentOnly "com.h2database:h2"` later!
    implementation "com.h2database:h2"
    developmentOnly "org.springframework.boot:spring-boot-devtools"
    runtimeOnly "org.postgresql:postgresql"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
}

node {
    version = "16.17.0"
    npmVersion = "8.15.0"
    npmInstallCommand = "ci"
    download = project.hasProperty("nodeInstall")
    workDir = file("${project.rootDir}/.gradle/nodejs")
    npmWorkDir = file("${project.rootDir}/.gradle/npm")
}

task prettier(type: NpmTask, dependsOn: "npmInstall") {
    args = ["run", "prettier:check"]
}
check.dependsOn prettier

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${googleProtobufVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${ioGrpcVersion}"
        }
    }
    generateProtoTasks {
        ofSourceSet("main").configureEach {
            plugins {
                grpc {}
            }
        }
    }
}

flyway {
    locations = ["filesystem:src/main/resources/db/migration"]
}

task flywayMigrateDev(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
    url = "jdbc:postgresql://localhost:5432/snow_white"
    user = "snow_white"
    password = "snow_white_password"
}

task flywayMigrateTest(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
    url = "jdbc:postgresql://localhost:5432/snow_white_test"
    user = "snow_white"
    password = "snow_white_password"
}

task flywayCleanTest(type: org.flywaydb.gradle.task.FlywayCleanTask) {
    url = "jdbc:postgresql://localhost:5432/snow_white_test"
    user = "snow_white"
    password = "snow_white_password"
}

test {
    useJUnitPlatform()
    exclude "**/*IntegrationTest*"
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

task integrationTest(type: Test, dependsOn: test) {
    useJUnitPlatform()
    include "**/*IntegrationTest*"
}
check.dependsOn integrationTest

task integrationTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn integrationTest
}
